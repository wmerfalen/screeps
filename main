var spawner = require('spawner');
var events = require('events');
var config = require('config');
var constants = require('constants');

function revertRoles(type){
    for(var i in Game.creeps){
        var role = Game.creeps[i].memory.role
        if(role == type && type != Game.creeps[i].memory.override_role){
            Game.creeps[i].memory.override_role = null;
        }
    }
}

/* TODO: Seeing as how this is the main loop of our entire system, it would be wise
 * to start moving a lot of the functionality away from spawner and into
 * this loop export. 
 */
module.exports.loop = function () {

    var ofSelf = this;
    this.print = function(foo){
        console.log('{main}: ' + foo);
    };
    for(var name in Memory.creeps) {
        if(!Game.creeps[name]) {
            delete Memory.creeps[name];
            console.log('Clearing non-existing creep memory:', name);
        }
    }
    
    var sp = new spawner();
    sp.eventHandler.addEventListener('spawn_new',function(type){
        console.log('[event] spawn_new of type: ' + type);
        sp.spawn(type);
    });
    sp.eventHandler.addEventListener('spawn_full',function(data){
        ofSelf.print('spawn full event listener triggered');
        if((Game.time % constants.SPAWN_FULL_MODULOUS) != 0){
            return;
        }
        var rm = require('room.memory');
        rm.increment('spawn_full');
        if(rm.get('spawn_full') > constants.MAX_SPAWN_FULL){
            /* The spawn has been full for more than MAX_SPAWN_FULL * SPAWN_FULL_MODULOUS ticks */
            /* Obbbbbviously, there's nothing going on... */
            
            /* If there are less harvesters than maxCreep, spawn new ones */
            console.log('Spawn has been full for: ' + (rm.get('spawn_full') * constants.SPAWN_FULL_MODULOUS) + " ticks");
            sp.trigger('spawn_new','harvester');
        }
            
        console.log('[event] spawn is full: ' + data);
    });
    sp.run();
    if(typeof (config).room()['init'] == 'undefined'){
        config.init(config.room());
        config.room()['init'] = 1;
    }
}
